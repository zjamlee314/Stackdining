package com.stackdining.www.presenter;import com.stackdining.www.base.BasePresenter;import com.stackdining.www.contract.CanteenContract;import com.stackdining.www.model.CanteenModel;import com.stackdining.www.model.bean.CanteenDetailsBean;import com.stackdining.www.model.bean.DishesListBean;import com.stackdining.www.model.bean.NewDishesListBean;import com.stackdining.www.model.bean.PublicResultBean;import java.util.Map;public class CanteenPresenter extends BasePresenter<CanteenContract.IView> implements CanteenContract.IPresenter {    private CanteenModel canteenModel;    /**     * 1、在这个方法中初始化model     */    @Override    protected void initModel() {        canteenModel = new CanteenModel();    }    @Override    public void about(Map<String, Object> paramsMap) {        //2、调用model中的的方法，设置回调监听        canteenModel.about(paramsMap, new CanteenContract.IModel.IModelCallback() {            @Override            public void onAboutSuccess(CanteenDetailsBean canteenDetailsBean) {                //3、必须先判断是否挂载、然后才可以使用getView方法                if (isViewAttached()) {                    if (canteenDetailsBean != null) {                        getView().onAboutSuccess(canteenDetailsBean);                    }else {                        getView().onAboutSuccess(canteenDetailsBean);                    }                }            }            @Override            public void onAboutFailure(Throwable e) {                //4、失败回调                if (isViewAttached()) {                    getView().onAboutFailure(e);                }            }            @Override            public void onDishesListSuccess(DishesListBean dishesListBean) {            }            @Override            public void onDishesListFailure(Throwable e) {            }            @Override            public void onSaveSuccess(PublicResultBean publicResultBean) {            }            @Override            public void onSaveFailure(Throwable e) {            }            @Override            public void onNewDishesListSuccess(NewDishesListBean newDishesListBean) {            }            @Override            public void onNewDishesListFailure(Throwable e) {            }        });    }    @Override    public void dishes_list(Map<String, Object> paramsMap) {        //2、调用model中的的方法，设置回调监听        canteenModel.dishes_list(paramsMap, new CanteenContract.IModel.IModelCallback() {            @Override            public void onAboutSuccess(CanteenDetailsBean canteenDetailsBean) {            }            @Override            public void onAboutFailure(Throwable e) {            }            @Override            public void onDishesListSuccess(DishesListBean dishesListBean) {                //3、必须先判断是否挂载、然后才可以使用getView方法                if (isViewAttached()) {                    if (dishesListBean != null) {                        getView().onDishesListSuccess(dishesListBean);                    }else {                        getView().onDishesListSuccess(dishesListBean);                    }                }            }            @Override            public void onDishesListFailure(Throwable e) {                //4、失败回调                if (isViewAttached()) {                    getView().onDishesListFailure(e);                }            }            @Override            public void onSaveSuccess(PublicResultBean publicResultBean) {            }            @Override            public void onSaveFailure(Throwable e) {            }            @Override            public void onNewDishesListSuccess(NewDishesListBean newDishesListBean) {            }            @Override            public void onNewDishesListFailure(Throwable e) {            }        });    }    @Override    public void save(Map<String, Object> paramsMap) {        //2、调用model中的的方法，设置回调监听        canteenModel.save(paramsMap, new CanteenContract.IModel.IModelCallback() {            @Override            public void onAboutSuccess(CanteenDetailsBean canteenDetailsBean) {            }            @Override            public void onAboutFailure(Throwable e) {            }            @Override            public void onDishesListSuccess(DishesListBean dishesListBean) {            }            @Override            public void onDishesListFailure(Throwable e) {            }            @Override            public void onSaveSuccess(PublicResultBean publicResultBean) {                //3、必须先判断是否挂载、然后才可以使用getView方法                if (isViewAttached()) {                    if (publicResultBean != null) {                        getView().onSaveSuccess(publicResultBean);                    }else {                        getView().onSaveSuccess(publicResultBean);                    }                }            }            @Override            public void onSaveFailure(Throwable e) {                //4、失败回调                if (isViewAttached()) {                    getView().onSaveFailure(e);                }            }            @Override            public void onNewDishesListSuccess(NewDishesListBean newDishesListBean) {            }            @Override            public void onNewDishesListFailure(Throwable e) {            }        });    }    @Override    public void new_dishes_list(Map<String, Object> paramsMap) {        //2、调用model中的的方法，设置回调监听        canteenModel.new_dishes_list(paramsMap, new CanteenContract.IModel.IModelCallback() {            @Override            public void onAboutSuccess(CanteenDetailsBean canteenDetailsBean) {            }            @Override            public void onAboutFailure(Throwable e) {            }            @Override            public void onDishesListSuccess(DishesListBean dishesListBean) {            }            @Override            public void onDishesListFailure(Throwable e) {            }            @Override            public void onSaveSuccess(PublicResultBean publicResultBean) {            }            @Override            public void onSaveFailure(Throwable e) {            }            @Override            public void onNewDishesListSuccess(NewDishesListBean newDishesListBean) {                //3、必须先判断是否挂载、然后才可以使用getView方法                if (isViewAttached()) {                    if (newDishesListBean != null) {                        getView().onNewDishesListSuccess(newDishesListBean);                    }else {                        getView().onNewDishesListSuccess(newDishesListBean);                    }                }            }            @Override            public void onNewDishesListFailure(Throwable e) {                //4、失败回调                if (isViewAttached()) {                    getView().onNewDishesListFailure(e);                }            }        });    }}