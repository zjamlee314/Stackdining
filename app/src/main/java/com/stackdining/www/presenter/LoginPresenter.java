package com.stackdining.www.presenter;import com.stackdining.www.base.BasePresenter;import com.stackdining.www.contract.LoginContract;import com.stackdining.www.model.LoginModel;import com.stackdining.www.model.bean.LoginBean;import com.stackdining.www.model.bean.PublicResultBean;import java.util.Map;public class LoginPresenter extends BasePresenter<LoginContract.IView> implements LoginContract.IPresenter {    private LoginModel mLoginModel;    /**     * 1、在这个方法中初始化model     */    @Override    protected void initModel() {        mLoginModel = new LoginModel();    }    @Override    public void sendVerification(Map<String, Object> paramsMap) {        //2、调用model中的的方法，设置回调监听        mLoginModel.sendVerification(paramsMap, new LoginContract.IModel.IModelCallback() {            @Override            public void onSendVerificationCodeSuccess(PublicResultBean publicResultBean) {                //3、必须先判断是否挂载、然后才可以使用getView方法                if (isViewAttached()) {                    if (publicResultBean != null) {                        getView().onSendVerificationCodeSuccess(publicResultBean);                    }else {                        getView().onSendVerificationCodeSuccess(publicResultBean);                    }                }            }            @Override            public void onSendVerificationCodeFailure(Throwable e) {                //4、失败回调                if (isViewAttached()) {                    getView().onSendVerificationCodeFailure(e);                }            }            @Override            public void onLoginCodeSuccess(LoginBean loginBean) {            }            @Override            public void onLoginCodeFailure(Throwable e) {            }            @Override            public void onLoginPwdSuccess(LoginBean loginBean) {            }            @Override            public void onLoginPwdFailure(Throwable e) {            }        });    }    @Override    public void loginCode(Map<String, Object> paramsMap) {        //2、调用model中的的方法，设置回调监听        mLoginModel.loginCode(paramsMap, new LoginContract.IModel.IModelCallback() {            @Override            public void onSendVerificationCodeSuccess(PublicResultBean publicResultBean) {            }            @Override            public void onSendVerificationCodeFailure(Throwable e) {            }            @Override            public void onLoginCodeSuccess(LoginBean loginBean) {                //3、必须先判断是否挂载、然后才可以使用getView方法                if (isViewAttached()) {                    if (loginBean != null) {                        getView().onLoginCodeSuccess(loginBean);                    }else {                        getView().onLoginCodeSuccess(loginBean);                    }                }            }            @Override            public void onLoginCodeFailure(Throwable e) {                //4、失败回调                if (isViewAttached()) {                    getView().onLoginCodeFailure(e);                }            }            @Override            public void onLoginPwdSuccess(LoginBean loginBean) {            }            @Override            public void onLoginPwdFailure(Throwable e) {            }        });    }    @Override    public void loginPwd(Map<String, Object> paramsMap) {        //2、调用model中的的方法，设置回调监听        mLoginModel.loginPwd(paramsMap, new LoginContract.IModel.IModelCallback() {            @Override            public void onSendVerificationCodeSuccess(PublicResultBean publicResultBean) {            }            @Override            public void onSendVerificationCodeFailure(Throwable e) {            }            @Override            public void onLoginCodeSuccess(LoginBean loginBean) {            }            @Override            public void onLoginCodeFailure(Throwable e) {            }            @Override            public void onLoginPwdSuccess(LoginBean loginBean) {                //3、必须先判断是否挂载、然后才可以使用getView方法                if (isViewAttached()) {                    if (loginBean != null) {                        getView().onLoginPwdSuccess(loginBean);                    }else {                        getView().onLoginPwdSuccess(loginBean);                    }                }            }            @Override            public void onLoginPwdFailure(Throwable e) {                //4、失败回调                if (isViewAttached()) {                    getView().onLoginPwdFailure(e);                }            }        });    }}