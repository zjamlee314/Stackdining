package com.stackdining.www.base;import android.content.Context;import android.os.Bundle;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.fragment.app.Fragment;import com.stackdining.www.app.StackDinApplication;import com.stackdining.www.dialog.LoadingDialog;import com.stackdining.www.utils.NetUtil;import com.stackdining.www.utils.StatusBarUtil;import java.math.BigDecimal;import butterknife.ButterKnife;/** * 声明规范和使用规范同BaseActivity * {@link BaseActivity} */public abstract class BaseFragment<P extends BasePresenter> extends Fragment implements IBaseView{    protected P mPresenter;    private View inflate;    private BigDecimal apkSize;    protected boolean isInit = false;    protected boolean isLoad = false;    protected LoadingDialog lld;    @Nullable    @Override    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {        lld = new LoadingDialog(getActivity());        //当FitsSystemWindows设置 true 时，会在屏幕最上方预留出状态栏高度的 padding        StatusBarUtil.setRootViewFitsSystemWindows(getActivity(),false);        //设置状态栏透明        StatusBarUtil.setTranslucentStatus(getActivity());        //true=黑色字体  false=白色        StatusBarUtil.setStatusBarDarkTheme(getActivity(), true);        inflate = inflater.inflate(provideLayoutId(), container, false);        ButterKnife.bind(this, inflate);        isInit = true;        /**初始化的时候去加载数据**/        return inflate;    }    @Override    public void onActivityCreated(@Nullable Bundle savedInstanceState) {        super.onActivityCreated(savedInstanceState);    }    @Override    public void onResume() {        super.onResume();    }    @Override    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {        super.onViewCreated(view, savedInstanceState);        mPresenter = providePresenter();        if (mPresenter != null) {            mPresenter.attachView(this);        }        initView(inflate);        initData();    }    @Override    public void setUserVisibleHint(boolean isVisibleToUser) {        super.setUserVisibleHint(isVisibleToUser);        isCanLoadData();    }    /**     * 是否可以加载数据     * 可以加载数据的条件：     * 1.视图已经初始化     * 2.视图对用户可见     */    private void isCanLoadData() {        if (!isInit) {            return;        }        if (getUserVisibleHint()) {            lazyLoad();            isLoad = true;        } else {            if (isLoad) {                stopLoad();            }        }    }    protected abstract P providePresenter();    protected void initData() {    }    protected void initView(View view) {    }    protected abstract int provideLayoutId();    /**     * 当视图初始化并且对用户可见的时候去真正的加载数据     */    protected abstract void lazyLoad();    /**     * 当视图已经对用户不可见并且加载过数据，如果需要在切换到其他页面时停止加载数据，可以覆写此方法     */    protected void stopLoad() {    }    /**     * 释放资源     */    @Override    public void onDestroyView() {        super.onDestroyView();    }    /**     * 释放资源     */    @Override    public void onDestroy() {        super.onDestroy();        if (mPresenter != null) {            mPresenter.detachView();        }    }    //判断是否有网络    public boolean hasNetwork() {        return NetUtil.hasNetwork(context());    }    //无网提醒    public void showNoNetTip() {        Toast.makeText(context(), "无网，请检查网络", Toast.LENGTH_SHORT).show();    }    /**     * 为presenter层提供上下文环境  ps： 非必须     */    @Override    public Context context() {        return getContext() == null ? StackDinApplication.getAppContext() : getContext();    }    public  void showLoading(String msg){        try {            if(lld != null){                lld.setLoadMsg(msg);                lld.show();            }        }catch (Exception e){            e.printStackTrace();        }    }    /**     * 隐藏加载框     */    public void hideLoading(){        try {            if(lld != null){                lld.dismiss();            }        }catch (Exception e){            e.printStackTrace();        }    }}